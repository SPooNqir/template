// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package template

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TemplateGolangClient is the client API for TemplateGolang service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemplateGolangClient interface {
	Get(ctx context.Context, in *Template, opts ...grpc.CallOption) (*Template, error)
	Create(ctx context.Context, in *Template, opts ...grpc.CallOption) (*Template, error)
}

type templateGolangClient struct {
	cc grpc.ClientConnInterface
}

func NewTemplateGolangClient(cc grpc.ClientConnInterface) TemplateGolangClient {
	return &templateGolangClient{cc}
}

func (c *templateGolangClient) Get(ctx context.Context, in *Template, opts ...grpc.CallOption) (*Template, error) {
	out := new(Template)
	err := c.cc.Invoke(ctx, "/template_golang.template_golang/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateGolangClient) Create(ctx context.Context, in *Template, opts ...grpc.CallOption) (*Template, error) {
	out := new(Template)
	err := c.cc.Invoke(ctx, "/template_golang.template_golang/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemplateGolangServer is the server API for TemplateGolang service.
// All implementations must embed UnimplementedTemplateGolangServer
// for forward compatibility
type TemplateGolangServer interface {
	Get(context.Context, *Template) (*Template, error)
	Create(context.Context, *Template) (*Template, error)
	mustEmbedUnimplementedTemplateGolangServer()
}

// UnimplementedTemplateGolangServer must be embedded to have forward compatible implementations.
type UnimplementedTemplateGolangServer struct {
}

func (UnimplementedTemplateGolangServer) Get(context.Context, *Template) (*Template, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTemplateGolangServer) Create(context.Context, *Template) (*Template, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTemplateGolangServer) mustEmbedUnimplementedTemplateGolangServer() {}

// UnsafeTemplateGolangServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemplateGolangServer will
// result in compilation errors.
type UnsafeTemplateGolangServer interface {
	mustEmbedUnimplementedTemplateGolangServer()
}

func RegisterTemplateGolangServer(s grpc.ServiceRegistrar, srv TemplateGolangServer) {
	s.RegisterService(&TemplateGolang_ServiceDesc, srv)
}

func _TemplateGolang_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Template)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateGolangServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template_golang.template_golang/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateGolangServer).Get(ctx, req.(*Template))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateGolang_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Template)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateGolangServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template_golang.template_golang/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateGolangServer).Create(ctx, req.(*Template))
	}
	return interceptor(ctx, in, info, handler)
}

// TemplateGolang_ServiceDesc is the grpc.ServiceDesc for TemplateGolang service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TemplateGolang_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "template_golang.template_golang",
	HandlerType: (*TemplateGolangServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _TemplateGolang_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _TemplateGolang_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "template.proto",
}
